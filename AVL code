class AVL<T extends Comparable<T>> {
    class Node {
        T data;
        int height;
        Node left, right;
        Node(T data) {
            this.data = data;
            height = 1;
        }
    }

    private Node root;

    private int height(Node n)
    {return n==null?0:n.height;}
    private int balanceFactor(Node n)
    {return n==null?0:height(n.left)-height(n.right);}
    private void updateHeight(Node n)
    {n.height=1+ Math.max(height(n.left), height(n.right));}

    private Node rotateRight(Node y) {
       Node x=y.left;
       y.left=x.right;
       x.right=y;
       updateHeight(x);
       updateHeight(y);
       return x;
    }

    private Node rotateLeft(Node x) {
       Node y=x.right;
       x.right=y.left;
       y.left=x;
       updateHeight(y);
       updateHeight(x);
       return y;
    }

    private Node balance(Node n) {
     updateHeight(n);
     int bf=balanceFactor(n);

    if(bf>1){
        if(balanceFactor(n.left)<0)n.left=rotateLeft(n.left);
        return rotateRight(n);
    }
    if(bf<-1){
        if(balanceFactor(n.right)>0)n.right=rotateRight(n.right);
        return rotateLeft(n);
    }
    return n;
    }

    public void add(T data) { root = insert(root, data); }
    private Node insert(Node n, T data) {
     if(n==null) return new Node(data);
     int cmp=data.compareTo(n.data);
     if(cmp<0) n.left=insert(n.left,data);
     else if(cmp>0) n.right=insert(n.right,data);
     else return n;
     return balance(n);
    }

    public boolean contains(T data) { return search(root, data); }
    private boolean search(Node n, T data) {
       if(n==null) return false;
       int cmp=data.compareTo(n.data);
       if(cmp==0) return true;
      return search(cmp<0 ? n.left :n.right,data);
    }

    public void delete(T data) { root = delete(root, data); }
    private Node delete(Node n, T data) {
        if(n==null) return null;
        int cmp=data.compareTo(n.data);
        if(cmp<0) n.left=delete(n.left,data);
        else if(cmp>0) n.right=delete(n.right,data);

        else {
            if(n.left==null || n.right==null){
                return n.left!=null ? n.left : n.right;
            }
            Node min=n.right;
            while(min.left!=null)min=min.left;
            n.data=min.data;
            n.right=delete(n.right,min.data);
        }
        return balance(n);
    }

    public void printInorder() { inorder(root); System.out.println(); }
    private void inorder(Node n) {
        if (n != null) {
            inorder(n.left);
            System.out.print(n.data + " ");
            inorder(n.right);
        }
    }
    public void printPreorder() { preorder(root); System.out.println(); }
    private void preorder(Node n) {
        if (n != null) {
            System.out.print(n.data + " ");
            preorder(n.left);
            preorder(n.right);
        }
    }

    public void printPostorder() { postorder(root); System.out.println(); }
    private void postorder(Node n) {
        if (n != null) {
            postorder(n.left);
            postorder(n.right);
            System.out.print(n.data + " ");
        }
    }
    public static void main(String[] args) {
        AVL<Integer> tree = new AVL<>();
        int[] nums = {5, 3, 2, 1, 0};
        for (int n : nums) tree.add(n);

        System.out.print("Inorder: ");
        tree.printInorder();
        System.out.print("Preorder: ");
        tree.printPreorder();
        System.out.print("Postorder: ");
        tree.printPostorder();
        System.out.println("Contains 3? " + tree.contains(3));
        tree.delete(3);
        System.out.print("Inorder after delete: ");
        tree.printInorder();
    }
}
