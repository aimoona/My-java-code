class RedBlackTree<T extends Comparable<T>> {
    private static final boolean RED = true;
    private static final boolean BLACK = false;

    private class Node {
        T data;
        Node left, right;
        boolean color;

        Node(T data, boolean color) {
            this.data = data;
            this.color = color;
        }
    }

    private Node root;

    public void add(T data) {
        root = insert(root, data);
        root.color = BLACK;
    }

    private Node insert(Node node, T data) {
     if(node==null) return new Node(data, RED);

     int cmp=data.compareTo(node.data);
     if(cmp<0) node.left=insert(node.left,data);
     else if(cmp>0) node.right=insert(node.right,data);

     if(isRed(node.right) && !isRed(node.left)) node=rotateLeft(node);
     if(isRed(node.left) && isRed(node.left.left)) node=rotateRight(node);
     if(isRed(node.left) && isRed(node.right)) flipColors(node);

        return node;
    }

    private boolean isRed(Node node) {
    return node!=null && node.color==RED;
    }

    private Node rotateLeft(Node h) {
        Node x=h.right;
        h.right=x.left;
        x.left=h;
        x.color=h.color;
        h.color=RED;
        return x;
    }


    private Node rotateRight(Node h) {
        Node x=h.left;
        h.left=x.right;
        x.right=h;
        x.color=h.color;
        h.color=RED;
        return x;
    }

    private void flipColors(Node h) {
       h.color=!h.color;
       h.left.color=!h.left.color;
       h.right.color=!h.right.color;
    }

    public boolean contains(T data) {
        return search(root, data);
    }

    private boolean search(Node node, T data) {
      while(node!=null){
           int cmp=data.compareTo(node.data);
           if(cmp<0) node=node.left;
           else if(cmp>0) node=node.right;
           else return false;
      }
      return true;
    }

    public void inorder() {
        inorder(root);
        System.out.println();
    }

    private void inorder(Node node) {
        if (node != null) {
            inorder(node.left);
            System.out.print(node.data + " ");
            inorder(node.right);
        }
    }
    public void delete(T data) {
        root = delete(root, data);
        if (root != null) root.color = BLACK;
    }

    private Node delete(Node node, T data) {
        if(node==null) return null;

       int cmp=data.compareTo(node.data);
       if(cmp<0){
           node.left=delete(node.left,data);
        }
       else if(cmp>0){
           node.right=delete(node.right,data);
       }
       else {
           if(node.left==null || node.right==null){
               return fixAfterDelete(node.left!=null ? node.left :node.right);
           }
          Node min=node.right;
           while(min.left!=null) min=min.left;
           node.data=min.data;
           node.right=delete(node.right,min.data);
        }
        return fixAfterDelete(node);
    }
    private Node fixAfterDelete(Node node) {
        if (isRed(node)) return node;
        return node;
    }
}

class TreeSet<T extends Comparable<T>> {
    private RedBlackTree<T> tree = new RedBlackTree<>();
    public void delete(T value) { tree.delete(value); }
    public void add(T value) { tree.add(value); }
    public boolean contains(T value) { return tree.contains(value); }
    public void print() { tree.inorder();
    }
}

class TreeMap<K extends Comparable<K>, V> {
    private static class Pair<K extends Comparable<K>, V> implements Comparable<Pair<K, V>> {
        K key; V value;

        Pair(K key, V value) { this.key = key; this.value = value; }
        public int compareTo(Pair<K, V> o) { return key.compareTo(o.key); }
        public String toString() { return key + "=" + value; }
    }

    private RedBlackTree<Pair<K, V>> tree = new RedBlackTree<>();
    public void put(K key, V value) { tree.add(new Pair<>(key, value)); }
    public void print() { tree.inorder(); }
}

public class Main {
    public static void main(String[] args) {
        System.out.println("TreeSet:");
        TreeSet<Integer> set = new TreeSet<>();
        set.add(10); set.add(5); set.add(15);
        System.out.print("Inorder: ");
        set.print();
        System.out.println("\nContains 5? " + set.contains(5));
        System.out.println("delete 5");
        set.delete(5);
        System.out.println("Contains 5? " + set.contains(5));

        System.out.println("\nTreeMap:");
        TreeMap<String, Integer> map = new TreeMap<>();
        map.put("apple", 5); map.put("banana", 10); map.put("cherry", 15);
        System.out.print("Inorder: ");
        map.print();
    }
}
